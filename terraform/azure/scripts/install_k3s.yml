---
- name: Configure EC2 instance for K3s and deploy ArgoCD
  hosts: all
  become: yes
  gather_facts: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:

    - name: Ensure Python is installed (required for Ansible)
      raw: sudo yum install -y python3
      changed_when: false

    - name: Gather facts again after installing Python
      setup:

    - name: Update Yum packages
      yum:
        name: "*"
        state: latest

    - name: Install required packages
      yum:
        name:
          - docker
          - firewalld
          - unzip
        state: present

    - name: Start and enable Docker
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add ec2-user to the Docker group
      user:
        name: ec2-user
        groups: docker
        append: yes

    - name: Install K3s
      shell: |
        curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--write-kubeconfig-mode=644" sh -
      args:
        creates: /usr/local/bin/k3s

    - name: Reload systemd to detect K3s service
      systemd:
        daemon_reload: yes

    - name: Ensure K3s service is started and enabled
      systemd:
        name: k3s
        state: started
        enabled: yes

    - name: Configure firewall (firewalld)
      block:
        - name: Enable and start firewalld
          systemd:
            name: firewalld
            state: started
            enabled: yes

        - name: Allow SSH
          firewalld:
            service: ssh
            permanent: yes
            state: enabled

        - name: Allow K3s API traffic
          firewalld:
            port: 6443/tcp
            permanent: yes
            state: enabled

        - name: Reload firewall
          command: firewall-cmd --reload

    - name: Wait for K3s to be ready
      command: kubectl get nodes
      register: k3s_nodes
      retries: 10
      delay: 10
      until: k3s_nodes.rc == 0

    # ------------------------
    # Install ArgoCD
    # ------------------------
    - name: Create ArgoCD namespace
      kubernetes.core.k8s:
        name: argocd
        api_version: v1
        kind: Namespace
        state: present

    - name: Install ArgoCD
      kubernetes.core.k8s:
        state: present
        src: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        namespace: argocd

    - name: Wait for ArgoCD pods to be ready
      command: kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s

    - name: Expose ArgoCD Server via LoadBalancer
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: argocd-server-loadbalancer
            namespace: argocd
          spec:
            type: LoadBalancer
            selector:
              app.kubernetes.io/name: argocd-server
            ports:
              - protocol: TCP
                port: 80
                targetPort: 443

    - name: Get ArgoCD admin password
      command: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode
      register: argocd_admin_password

    - name: Display ArgoCD login info
      debug:
        msg: "ArgoCD UI is accessible via LoadBalancer. Login with 'admin' and password: {{ argocd_admin_password.stdout }}"

    # ------------------------
    # Deploy Jenkins using ArgoCD
    # ------------------------
    - name: Create Jenkins namespace
      kubernetes.core.k8s:
        name: jenkins
        api_version: v1
        kind: Namespace
        state: present

    - name: Create ArgoCD Application for Jenkins
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: jenkins
            namespace: argocd
          spec:
            destination:
              namespace: jenkins
              server: https://kubernetes.default.svc
            project: default
            source:
              repoURL: https://charts.jenkins.io
              targetRevision: "4.0.0"
              chart: jenkins
              helm:
                values: |
                  controller:
                    serviceType: LoadBalancer
                    adminUser: "admin"
                    adminPassword: "admin"
            syncPolicy:
              automated:
                selfHeal: true
                prune: true

    - name: Wait for Jenkins deployment
      command: kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=jenkins -n jenkins --timeout=600s

    - name: Get Jenkins admin password
      command: kubectl -n jenkins get secret jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode
      register: jenkins_admin_password

    - name: Display Jenkins login info
      debug:
        msg: "Jenkins UI is accessible via LoadBalancer. Login with 'admin' and password: {{ jenkins_admin_password.stdout }}"

